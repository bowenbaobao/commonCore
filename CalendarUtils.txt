package com.sekorm.common.util;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

/**
 * <b>类名：</b>DateUtil<br>
 * <b>功能：</b>日期时间工具类<br>
 * <b>Copyright SEKORM</b>
 * <li>版本&nbsp;&nbsp;&nbsp;&nbsp;修改日期&nbsp;&nbsp;&nbsp;&nbsp;部　　门&nbsp;&nbsp;&nbsp;&nbsp;作　者&nbsp;&nbsp;&nbsp;&nbsp;变更内容</li>
 * <hr>
 * <li>
 * v1.0&nbsp;&nbsp;&nbsp;&nbsp;20150511&nbsp;&nbsp;电商研发部&nbsp;&nbsp;&nbsp;&nbsp;商良磊&nbsp;&nbsp;&nbsp;&nbsp;创建类
 * </li>
 * <br><br>
 * @author 商良磊
 * @version 20150511
 *
 */
public class CalendarUtils {
	
	/**
	 * 禁止实例化，形成单例类静态方法集
	 */
	private CalendarUtils() {}
	
	/**
	 * <b>功能描述：</b>Date转换为Calendar。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @param date Date 日期类
	 * @return Calendar 日历类
	 */
	public static Calendar dateToCalendar(Date date) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		return calendar;
	}
	
	/**
	 * <b>功能描述：</b>Calendar转换为Date。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @param calendar Calendar 日历类
	 * @return Date 日期类
	 */
	public static Date calendarToDate(Calendar calendar) {
		return calendar.getTime();
	}
	
	/**
	 * <b>功能描述：</b>获得年份。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @return int 年份
	 */
	public static int getYear() {
		return Calendar.getInstance().get(Calendar.YEAR);
	}
	/**
	 * <b>功能描述：</b>获得年份。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @param date Date 日期对象
	 * @return int 年份
	 */
	public static int getYear(Date date) {
		if(null != date) {
			return CalendarUtils.dateToCalendar(date).get(Calendar.YEAR);
		} else {
			return CalendarUtils.getYear();
		}
	}
	/**
	 * <b>功能描述：</b>获得年份。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @param calendar Calendar 日历对象
	 * @return int 年份
	 */
	public static int getYear(Calendar calendar) {
		if(null != calendar) {
			return calendar.get(Calendar.YEAR);
		} else {
			return CalendarUtils.getYear();
		}
	}
	
	/**
	 * <b>功能描述：</b>获得月份，从0开始计算，既月份为0-11。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @return int 月份
	 */
	public static int getMonth() {
		return Calendar.getInstance().get(Calendar.MONTH);
	}
	/**
	 * <b>功能描述：</b>获得月份，从0开始计算，既月份为0-11。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @param date Date 日期对象
	 * @return int 月份
	 */
	public static int getMonth(Date date) {
		if(null != date) {
			return CalendarUtils.dateToCalendar(date).get(Calendar.MONTH)+1;
		} else {
			return CalendarUtils.getMonth();
		}
	}
	/**
	 * <b>功能描述：</b>获得月份，从0开始计算，既月份为0-11。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @param calendar Calendar 日历对象
	 * @return int 月份
	 */
	public static int getMonth(Calendar calendar) {
		if(null != calendar) {
			return calendar.get(Calendar.MONTH);
		} else {
			return CalendarUtils.getMonth();
		}
	}
	
	/**
	 * <b>功能描述：</b>获得日（号）。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @return int 日（号）
	 */
	public static int getDayOfMonth() {
		return Calendar.getInstance().get(Calendar.DAY_OF_MONTH);
	}
	/**
	 * <b>功能描述：</b>获得日（号）。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @param date Date 日期对象
	 * @return int 日（号）
	 */
	public static int getDayOfMonth(Date date) {
		if(null != date) {
			return CalendarUtils.dateToCalendar(date).get(Calendar.DAY_OF_MONTH);
		} else {
			return CalendarUtils.getDayOfMonth();
		}
	}
	/**
	 * <b>功能描述：</b>获得日（号）。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @param calendar Calendar 日历对象
	 * @return int 日（号）
	 */
	public static int getDayOfMonth(Calendar calendar) {
		if(null != calendar) {
			return calendar.get(Calendar.DAY_OF_MONTH);
		} else {
			return CalendarUtils.getDayOfMonth();
		}
	}
	
	/**
	 * <b>功能描述：</b>获得某月的天数。<br>
	 * <b>修订记录：</b><br>
	 * <li>20120929&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @param int year 年数
	 * @param int month 月数
	 * @return int 月总共天数
	 */
	
	public static int getTotalDaysOfMonth(int year, int month){
		Calendar calendar = Calendar.getInstance();
		calendar.set(Calendar.YEAR,year);
		calendar.set(Calendar.MONTH, month - 1);//Java月份从0开始算
		return calendar.getActualMaximum(Calendar.DATE);
	}
	
	/**
	 * <b>功能描述：</b>获得星期几，周日为0，以此类推。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @return int 星期几
	 */
	public static int getDayOfWeek() {
		return Calendar.getInstance().get(Calendar.DAY_OF_WEEK);
	}
	/**
	 * <b>功能描述：</b>获得星期几，周日为1，以此类推。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <li>20121008&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;修改返回值说明</li>
	 * <br><br>
	 * @param date Date 日期对象
	 * @return int 星期几
	 */
	public static int getDayOfWeek(Date date) {
		if(null != date) {
			return CalendarUtils.dateToCalendar(date).get(Calendar.DAY_OF_WEEK);
		} else {
			return CalendarUtils.getDayOfWeek();
		}
	}
	/**
	 * <b>功能描述：</b>获得星期几，周日为0，以此类推。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @param calendar Calendar 日历对象
	 * @return int 星期几
	 */
	public static int getDayOfWeek(Calendar calendar) {
		if(null != calendar) {
			return calendar.get(Calendar.DAY_OF_WEEK);
		} else {
			return CalendarUtils.getDayOfWeek();
		}
	}
	
	/**
	 * <b>功能描述：</b>获得小时，24小时制。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @return int 小时
	 */
	public static int getHourOfDay() {
		return Calendar.getInstance().get(Calendar.HOUR_OF_DAY);
	}
	/**
	 * <b>功能描述：</b>获得小时，24小时制。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @param date Date 日期对象
	 * @return int 小时
	 */
	public static int getHourOfDay(Date date) {
		if(null != date) {
			return CalendarUtils.dateToCalendar(date).get(Calendar.HOUR_OF_DAY);
		} else {
			return CalendarUtils.getHourOfDay();
		}
	}
	/**
	 * <b>功能描述：</b>获得小时，24小时制。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @param calendar Calendar 日历对象
	 * @return int 小时
	 */
	public static int getHourOfDay(Calendar calendar) {
		if(null != calendar) {
			return calendar.get(Calendar.HOUR_OF_DAY);
		} else {
			return CalendarUtils.getHourOfDay();
		}
	}
	
	/**
	 * <b>功能描述：</b>获得小时，12小时制。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @return int 小时
	 */
	public static int getHour() {
		return Calendar.getInstance().get(Calendar.HOUR);
	}
	/**
	 * <b>功能描述：</b>获得小时，12小时制。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @param date Date 日期对象
	 * @return int 小时
	 */
	public static int getHour(Date date) {
		if(null != date) {
			return CalendarUtils.dateToCalendar(date).get(Calendar.HOUR_OF_DAY);
		} else {
			return CalendarUtils.getHour();
		}
	}
	/**
	 * <b>功能描述：</b>获得小时，12小时制。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @param calendar Calendar 日历对象
	 * @return int 小时
	 */
	public static int getHour(Calendar calendar) {
		if(null != calendar) {
			return calendar.get(Calendar.HOUR);
		} else {
			return CalendarUtils.getHour();
		}
	}
	
	/**
	 * <b>功能描述：</b>获得分钟。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @return int 分钟
	 */
	public static int getMinute() {
		return Calendar.getInstance().get(Calendar.MINUTE);
	}
	/**
	 * <b>功能描述：</b>获得分钟。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @param date Date 日期对象
	 * @return int 分钟
	 */
	public static int getMinute(Date date) {
		if(null != date) {
			return CalendarUtils.dateToCalendar(date).get(Calendar.MINUTE);
		} else {
			return CalendarUtils.getMinute();
		}
	}
	/**
	 * <b>功能描述：</b>获得分钟。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @param calendar Calendar 日历对象
	 * @return int 分钟
	 */
	public static int getMinute(Calendar calendar) {
		if(null != calendar) {
			return calendar.get(Calendar.MINUTE);
		} else {
			return CalendarUtils.getMinute();
		}
	}
	
	/**
	 * <b>功能描述：</b>获得秒钟。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @return int 秒钟
	 */
	public static int getSecond() {
		return Calendar.getInstance().get(Calendar.SECOND);
	}
	/**
	 * <b>功能描述：</b>获得秒钟。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @param date Date 日期对象
	 * @return int 秒钟
	 */
	public static int getSecond(Date date) {
		if(null != date) {
			return CalendarUtils.dateToCalendar(date).get(Calendar.SECOND);
		} else {
			return CalendarUtils.getSecond();
		}
	}
	/**
	 * <b>功能描述：</b>获得秒钟。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @param calendar Calendar 日历对象
	 * @return int 秒钟
	 */
	public static int getSecond(Calendar calendar) {
		if(null != calendar) {
			return calendar.get(Calendar.SECOND);
		} else {
			return CalendarUtils.getSecond();
		}
	}

	/**
	 * <b>功能描述：</b>转换字符串形式的日期为Date类型，字符串形式通过参数指定。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @param date String 字符串形式日期
	 * @param pattern String 时间格式
	 * @return Date 转换后的Date对象
	 * @throws ParseException
	 */
	public static Date stringToDate(String date, String pattern) throws ParseException {
		SimpleDateFormat sdf = new SimpleDateFormat(pattern);
		if(null != date) {
			return sdf.parse(date);
		} else {
			return null;
		}
	}
	/**
	 * <b>功能描述：</b>转换字符串形式的日期为Date类型，字符串形式为yyyy-MM-dd。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @param date String 字符串形式日期
	 * @return Date 转换后的Date对象
	 * @throws ParseException
	 */
	public static Date stringToDate(String date) throws ParseException {
		return CalendarUtils.stringToDate(date, "yyyy-MM-dd");
	}
	/**
	 * <b>功能描述：</b>转换字符串形式的时间为Date类型，字符串形式为HH:mm:ss。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @param time String 字符串形式时间
	 * @return Date 转换后的Date对象
	 * @throws ParseException
	 */
	public static Date stringToTime(String time) throws ParseException {
		return CalendarUtils.stringToDate(time, "HH:mm:ss");
	}
	
	/**
	 * <b>功能描述：</b>转换字符串形式的日期为Calendar类型，字符串形式通过参数指定。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @param date String 字符串形式日期
	 * @param pattern String 时间格式
	 * @return Calendar 转换后的Calendar对象
	 * @throws ParseException
	 */
	public static Calendar stringToCalendar(String date, String pattern) throws ParseException {
		SimpleDateFormat sdf = new SimpleDateFormat(pattern);
		if(null != date) {
			return CalendarUtils.dateToCalendar(sdf.parse(date));
		} else {
			return null;
		}
	}
	/**
	 * <b>功能描述：</b>转换字符串形式的日期为Calendar类型，字符串形式为yyyy-MM-dd。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @param date String 字符串形式日期
	 * @return Calendar 转换后的Calendar对象
	 * @throws ParseException
	 */
	public static Calendar stringToCalendar(String date) throws ParseException {
		return CalendarUtils.stringToCalendar(date, "yyyy-MM-dd");
	}
	
	/**
	 * <b>功能描述：</b>转换Date类型为字符串形式，字符串形式通过参数指定。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @param date Date Date对象
	 * @param pattern String 时间格式
	 * @return String 日期指定格式的字符串形式
	 */
	public static String dateToString(Date date, String pattern) {
		SimpleDateFormat sdf = new SimpleDateFormat(pattern);
		if(null != date) {
			return sdf.format(date);
		} else {
			return null;
		}
	}
	/**
	 * <b>功能描述：</b>转换当前时间为字符串形式，字符串形式通过参数指定。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @param pattern String 时间格式
	 * @return String 日期指定格式的字符串形式
	 */
	public static String dateToString(String pattern) {
		return CalendarUtils.dateToString(new Date(), pattern);
	}
	/**
	 * <b>功能描述：</b>转换Date类型为字符串形式，字符串形式为yyyy-MM-dd。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @param date Date Date对象
	 * @return String yyyy-MM-dd格式日期字符串
	 */
	public static String dateToString(Date date) {
		return CalendarUtils.dateToString(date, "yyyy-MM-dd");
	}
	/**
	 * <b>功能描述：</b>转换当前时间为字符串形式，字符串形式为yyyy-MM-dd。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @return String yyyy-MM-dd格式日期字符串
	 */
	public static String dateToString() {
		return CalendarUtils.dateToString("yyyy-MM-dd");
	}
	/**
	 * <b>功能描述：</b>转换Date类型为字符串形式，字符串形式为HH:mm:ss。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @param date Date Date对象
	 * @return String HH:mm:ss格式日期字符串
	 */
	public static String timeToString(Date time) {
		return CalendarUtils.dateToString(time, "HH:mm:ss");
	}
	/**
	 * <b>功能描述：</b>转换当前时间为字符串形式，字符串形式为HH:mm:ss。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @return String HH:mm:ss格式日期字符串
	 */
	public static String timeToString() {
		return CalendarUtils.dateToString("HH:mm:ss");
	}
	
	/**
	 * <b>功能描述：</b>转换Calendar类型为字符串形式，字符串形式通过参数指定。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @param calendar Calendar calendar对象
	 * @param pattern String 时间格式
	 * @return String 日期指定格式的字符串形式
	 */
	public static String calendarToString(Calendar calendar, String pattern) {
		SimpleDateFormat sdf = new SimpleDateFormat(pattern);
		if(null != calendar) {
			return sdf.format(calendar);
		} else {
			return null;
		}
	}
	/**
	 * <b>功能描述：</b>转换Calendar类型为字符串形式，字符串形式为yyyy-MM-dd。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @param calendar Calendar calendar对象
	 * @return String yyyy-MM-dd格式日期字符串
	 */
	public static String dateToString(Calendar calendar) {
		return CalendarUtils.calendarToString(calendar, "yyyy-MM-dd");
	}
	/**
	 * <b>功能描述：</b>转换Calendar类型为字符串形式，字符串形式为HH:mm:ss。<br>
	 * <b>修订记录：</b><br>
	 * <li>20150511&nbsp;&nbsp;|&nbsp;&nbsp;商良磊&nbsp;&nbsp;|&nbsp;&nbsp;创建方法</li>
	 * <br><br>
	 * @param calendar Calendar calendar对象
	 * @return String HH:mm:ss格式日期字符串
	 */
	public static String timeToString(Calendar calendar) {
		return CalendarUtils.calendarToString(calendar, "HH:mm:ss");
	}
	
}
