package com.sekorm.common.util;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Properties;
import java.util.ResourceBundle;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public final class PropertyReader {

    private PropertyReader(String packageName, Locale locale) {
        ResourceBundle bnd = null;
        try {
            bnd = ResourceBundle.getBundle(packageName, locale);
        } catch (MissingResourceException ex) {
            ClassLoader cl = Thread.currentThread().getContextClassLoader();
            if (cl != null) {
                try {
                    bnd = ResourceBundle.getBundle(packageName, locale, cl);
                } catch (MissingResourceException ex2) {
                    // Ignore
                    logger.error("PropertyReader Error:", ex2);
                }
            }
        }
        bundle = new Properties();
        if(bnd != null) {
        	String val;
        	for(String key : bnd.keySet()) {
        		try {
        			val = new String(bnd.getString(key).getBytes("ISO-8859-1"), "UTF-8");
        		} catch (UnsupportedEncodingException e) {
        			logger.error("获取参数异常：key=" + key, e);
        			continue;
        		}
        		List<String> matcherKey = getMatcherKey(val, "\\[(.*?)\\]");
        		for(String mk : matcherKey) {
        			if(dbProps.containsKey(mk)) {
        				val = val.replace("[" + mk + "]", dbProps.get(mk));
        			} else {
        				logger.error("dbProps不能解决配置属性{}，key={}，val={}", mk, key, val);
        			}
        		}
        		bundle.setProperty(key, val);
        	}
        }
    }

    public static final PropertyReader getResourceBundle(String packageName) {
        return PropertyReader.getResourceBundle(packageName, Locale.getDefault());
    }


    public static final PropertyReader getResourceBundle(String packageName, Locale locale) {
        PropertyReader sm = rsBuddle.get(packageName);
        if (sm == null) {
            synchronized (PropertyReader.class) {
                if (rsBuddle.get(packageName) == null) {
                    sm = new PropertyReader(packageName, locale);
                    rsBuddle.put(packageName, sm);
                }
            }
        }
        return sm;
    }

    public final String getString(int key) {
        return getString(String.valueOf(key));
    }
    
    /*
     * 获取配置文件所有的key值
     */
    public final Set<String> getKeySet() {
    	return bundle.stringPropertyNames();
    }
    
    /**
     * Properties包含此key，且此key的值为true（忽略大小写）时，返回true
     * @param key 键值
     * @return key的布尔值
     */
    public final boolean getBoolean(String key) {
    	if (key == null) {
            throw new IllegalArgumentException("key may not have a null value ");
        }
    	
    	if (!getKeySet().contains(key)) { // 不包含此key
    		return false;
    	}
    	
    	String value = getString(key);
    	if (StringUtils.isBlank(value)) {
    		return false;
    	}
    	
    	if (value.equalsIgnoreCase("true")) {
    		return true;
    	}
    	
    	return false;
    }

    public final String getString(String key) {
        if (key == null) {
            throw new IllegalArgumentException("key may not have a null value ");
        }
        try {
        	String afterMatcher = bundle.getProperty(key);
        	//逐层遍历解析${}表达式
    		while (isMacherVal(afterMatcher)) {
    			List<String> str = getMatcherKey(afterMatcher, null);
    			for (String $key : str) {
    				String keyWith$ = "${"+$key+"}";
    				String $value = getString($key);
    				afterMatcher = afterMatcher.replace(keyWith$, $value);
    			}
    		}
        	return afterMatcher;
        } catch (Exception e) { //MissingResourceException
            return null;
        }
    }
    
    public final String getStringWith$(String key) {
    	if (key == null) {
            throw new IllegalArgumentException("key may not have a null value ");
        }
        try {
        	//解析值为${aa}格式的key
        	if (isMacherVal(key)) {
        		key = getMatcherKey(key, null).get(0);
			}
        	String afterMatcher = bundle.getProperty(key);
        	//逐层遍历解析${}表达式
    		while (isMacherVal(afterMatcher)) {
    			List<String> str = getMatcherKey(afterMatcher, null);
    			for (String $key : str) {
    				String keyWith$ = "${"+$key+"}";
    				String $value = getString($key);
    				afterMatcher = afterMatcher.replace(keyWith$, $value);
    			}
    		}
        	return afterMatcher;
        } catch (Exception e) { //MissingResourceException
            return null;
        }
    }
    
    /**
	 * 解析获取字符串中${}所包裹key
	 *
	 * @author charles_shang
	 * @date 2016年4月8日
	 *
	 * @param matcher
	 * @return
	 */
    private List<String> getMatcherKey(String matcher, String regxStr){
		Pattern pt;
		if(regxStr == null) {
			pt = Pattern.compile(regx);
		} else {
			pt = Pattern.compile(regxStr);
		}
		Matcher mc = pt.matcher(matcher);
		List<String> str = new ArrayList<String>();
		while(mc.find()){
			str.add(mc.group(1));
		}
		
		return str;
	}
    
    /**
     * 是否含有${}表达式
     *
     * @author charles_shang
     * @date 2016年4月8日
     *
     * @param matcher
     * @return
     */
    private Boolean isMacherVal(String matcher){
    	if(matcher == null) return false;
    	Pattern pt = Pattern.compile(regx);
    	Matcher mc = pt.matcher(matcher);
    	return mc.find();
    }

    public static final Map<String, String> dbProps = new HashMap<String, String>();
    private static int LOCALE_CACHE_SIZE = 10;
    private final Properties bundle;
    private Logger logger = LoggerFactory.getLogger(PropertyReader.class);
    //解析${}表达式正则匹配符
    private static final String regx = "\\$\\{(.*?)\\}";
    private static Map<String, PropertyReader> rsBuddle = new LinkedHashMap<String, PropertyReader>(LOCALE_CACHE_SIZE, 1, true) {
        private static final long serialVersionUID = 1L;

        @Override
        protected boolean removeEldestEntry(Map.Entry<String, PropertyReader> eldest) {
            if (size() > (LOCALE_CACHE_SIZE - 1)) {
                return true;
            }
            return false;
        }
    };

}
