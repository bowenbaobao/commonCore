package com.sekorm.common.util;

import java.math.BigDecimal;
import java.util.Collection;
import java.util.List;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.TransformerUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * @desc: TODO describe what you do
 * @User: ambitor_luo
 * @Date: 2015/8/5
 */
public class StringUtils extends org.apache.commons.lang.StringUtils {
	private final static Logger LOG = LoggerFactory.getLogger(StringUtils.class);

    /**
     * 除掉字符串拼接的时候 多余的,分隔符
     *
     * @param target
     * @return
     */
    public static final String removeExcessSeparator(String target) {
        return removeExcessSeparator(target, ",");
    }


    /**
     * 除掉字符串拼接的时候 多余的分隔符
     *
     * @param target
     * @param separator
     * @return
     */
    public static final String removeExcessSeparator(String target, String separator) {
        if (target == null) return "";
        if (separator == null) return target;
        String temp = target.replaceAll(separator, "").trim();//这种情况,,,或则,这个情况
        if (isBlank(temp)) return "";
        if (target.startsWith(separator)) target = target.substring(1);//这种情况 ,xx,xx
        if (target.endsWith(separator)) target = target.substring(0, target.length() - 1);//这种情况 xx,xx,
        return target;
    }

    /**
     * 把Collection中Object的某个属性提取出来用,隔开
     *
     * @param list
     * @param methodName
     * @return
     */
    public static final String extractToString(List list, String methodName) {
        return extractToString(list, methodName, ",");
    }

    /**
     * 把Collection中Object的某个属性提取出来用分隔符隔开
     *
     * @param list
     * @param methodName
     * @param separator
     * @return
     */
    public static final String extractToString(Collection list, String methodName, String separator) {
        if (CollectionUtils.isEmpty(list)) return "";
        Collection names = CollectionUtils.collect(list, TransformerUtils.invokerTransformer(methodName));
        String str = "";
        for (Object name : names) {
            if (name == null || isBlank(String.valueOf(name))) continue;
            str += name + separator;
        }
        if (str.endsWith(separator)) {
            str = str.substring(0, str.length() - 1);
        }
        return str;
    }

    /**
     * 将null值转成"",非null值返回转换为String型的原值
     * @param obj 可为String,Integer,Long,Double,Float,Short,Byte,Character,BigDecimal,Boolean类型
     * @return　""或转换为String型的原值
     */
    public static final String null2Blank(Object obj) {
    	try
    	{
    		if(obj instanceof String){
    			return null == obj || obj.toString().trim().equalsIgnoreCase("null")?"":obj.toString().trim();
    		}
    		if(obj instanceof Integer){
    			return null == obj || (Integer.valueOf(obj.toString().trim()) == 0)?"":obj.toString().trim();
    		}
    		if(obj instanceof Long){
    			return null == obj || (Long.valueOf(obj.toString().trim()) == 0L)?"":obj.toString().trim();
    		}
    		if(obj instanceof Double){
    			return null == obj || (Double.valueOf(obj.toString().trim()) == 0.0D)?"":obj.toString().trim();
    		}
    		if(obj instanceof Float){
    			return null == obj || (Float.valueOf(obj.toString().trim()) == 0.0F)?"":obj.toString().trim();
    		}
    		if(obj instanceof Short){
    			return null == obj || Short.valueOf(obj.toString().trim()) == 0 ?"":obj.toString().trim();
    		}
    		if(obj instanceof Byte){
    			return null == obj || Byte.valueOf(obj.toString().trim()) == 0 ?"":obj.toString().trim();
    		}
    		if(obj instanceof Character){
    			return null == obj || obj.toString().trim().equalsIgnoreCase("0")?"":obj.toString().trim();
    		}    		
    		if(obj instanceof BigDecimal){
    			return null == obj || obj.toString().trim().equalsIgnoreCase("0")?"":obj.toString().trim();
    		}	
    		if(obj instanceof Boolean){
    			return null == obj || obj.toString().trim().equalsIgnoreCase("false")?"":obj.toString().trim();
    		}
    	}catch(Exception ex){
    		LOG.error("=====common-core StringUtils null2Blank exception:"+ex);
    		ex.printStackTrace();
    	}

    	return "";
    }
    
    /**
     * 转义Like通配符  <br/>
     * 	<b>&nbsp;&nbsp;&nbsp;&nbsp;注意事项：一定要在加左右通配符'%'之前进行转义</b>
     *
     * @author charles_shang
     * @date 2016年5月13日
     *
     * @param str
     * @return
     */
    public static final String escapeSqlLike(String str){
    	if (str == null) {
			return null;
		}
    	
    	if (str.contains("\\")) {
    		str = str.replace("\\", "\\\\");
		}
    	
    	if (str.contains("_")) {
    		str = str.replace("_", "\\_");
		}
    	
    	if (str.contains("%")) {
    		str = str.replace("%", "\\%");
    	}
    	
    	if (str.contains("/")) {
    		str = str.replace("/", "\\/");
    	}
    	
    	return str;
    }
    
    public static void main(String[] args){
    	String a = "1111111a1111111a111";
    	System.out.println(a.replace("a", "b"));
    }
}
