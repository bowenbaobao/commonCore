package com.sekorm.common.util;

import java.io.IOException;
import java.text.SimpleDateFormat;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;

/**
 * @desc: TODO describe what you do
 * @User: ambitor_luo
 * @Date: 2015/6/29
 */
public class JacksonUtils {
    /**
     * Object 转 Json字符串
     *
     * @param object 元素类型
     * @return
     */
    public static String toJson(Object object) {
        try {
            return write.writeValueAsString(object);
        } catch (Exception e) {
            logger.error("对象转成Json字符串失败:", e);
            throw new RuntimeException(e);
        }
    }

    /**
     * JSON 转Object
     *
     * @param json json字符串
     * @param clzz 元素类型
     * @param <T>
     * @return
     */
    public static <T> T toBean(String json, Class<T> clzz) {
        try {
            return read.readValue(json, clzz);
        } catch (IOException e) {
            logger.error("JSON字符串转对象失败：", e);
            throw new RuntimeException(e);
        }
    }

    /**
     * JSON 转Object
     *
     * @param object json字符串
     * @param clzz 元素类型
     * @param <T>
     * @return
     */
    public static <T> T toBean(Object object, Class<T> clzz) {
        try {
            return read.readValue(toJson(object), clzz);
        } catch (IOException e) {
            logger.error("JSON字符串转对象失败：", e);
            throw new RuntimeException(e);
        }
    }

    /**
     * 获取泛型的Collection Type
     *
     * @param jsonStr         json字符串
     * @param collectionClass 泛型的Collection
     * @param elementClasses  元素类型
     */
    public static <T> T toBean(Object jsonStr, Class<?> collectionClass, Class<?>... elementClasses) {
        try {
            JavaType javaType = read.getTypeFactory().constructParametricType(collectionClass, elementClasses);
            return read.readValue(toJson(jsonStr), javaType);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

    }

    /**
     * 获取泛型的Collection Type
     *
     * @param jsonStr         json字符串
     * @param collectionClass 泛型的Collection
     * @param elementClasses  元素类型
     */
    public static <T> T toBean(String jsonStr, Class<?> collectionClass, Class<?>... elementClasses) {
        try {
            JavaType javaType = read.getTypeFactory().constructParametricType(collectionClass, elementClasses);
            return read.readValue(jsonStr, javaType);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
    
    /**
     * 获取指定TypeReference类型的Bean
     * @param content		json字符串
     * @param valueTypeRef	TypeReference类型，如new TypeReference<List<Map<String, String>>>() {}
     */
    public static <T> T toBean(String content, TypeReference<T> valueTypeRef) {
    	try {
    		return read.readValue(content, valueTypeRef);
    	} catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    //把Object转换成Json字符串的mapper的配置
    private static ObjectMapper write = new ObjectMapper() {
        {
            configure(SerializationFeature.INDENT_OUTPUT, Boolean.TRUE);
        }
    };
    //把JSON字符串转换成Object的mapper的配置
    private static ObjectMapper read = new ObjectMapper() {
        {
            this.setDateFormat(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"));
            configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, Boolean.FALSE);
        }
    };
    private final static Logger logger = LoggerFactory.getLogger(JacksonUtils.class);

}
